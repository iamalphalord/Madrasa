import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { updateCredentialsSchema } from "@shared/schema";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { KeyRound, User, Users } from "lucide-react";
import type { Student } from "@shared/schema";

interface CredentialsFormProps {
  student: Student;
  onSubmit: (data: any) => void;
  onCancel: () => void;
  isLoading?: boolean;
}

type CredentialsData = {
  studentPassword?: string;
  guardianPassword?: string;
  guardianEmail?: string;
};

export function CredentialsForm({ student, onSubmit, onCancel, isLoading }: CredentialsFormProps) {
  const form = useForm<CredentialsData>({
    resolver: zodResolver(updateCredentialsSchema),
    defaultValues: {
      studentPassword: "",
      guardianPassword: "",
      guardianEmail: student.guardianEmail || "",
    },
  });

  const handleSubmit = (data: CredentialsData) => {
    // Only include fields that have values
    const updateData: any = {};
    if (data.studentPassword) updateData.password = data.studentPassword;
    if (data.guardianPassword) updateData.guardianPassword = data.guardianPassword;
    if (data.guardianEmail) updateData.guardianEmail = data.guardianEmail;
    
    onSubmit(updateData);
  };

  const hasStudentCredentials = student.password;
  const hasParentCredentials = student.guardianPassword && student.guardianEmail;

  return (
    <div className="space-y-6">
      {/* Current Status */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <KeyRound className="h-5 w-5" />
            Current Login Status
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="flex items-center gap-3">
              <div className={`w-3 h-3 rounded-full ${hasStudentCredentials ? 'bg-green-500' : 'bg-red-500'}`} />
              <User className="h-4 w-4" />
              <span className="text-sm">
                Student Login: {hasStudentCredentials ? 'Enabled' : 'Not Set'}
              </span>
            </div>
            <div className="flex items-center gap-3">
              <div className={`w-3 h-3 rounded-full ${hasParentCredentials ? 'bg-green-500' : 'bg-red-500'}`} />
              <Users className="h-4 w-4" />
              <span className="text-sm">
                Parent Login: {hasParentCredentials ? 'Enabled' : 'Not Set'}
              </span>
            </div>
          </div>
          {hasStudentCredentials && (
            <div className="mt-3 p-3 bg-blue-50 dark:bg-blue-950 rounded-lg">
              <p className="text-sm text-blue-700 dark:text-blue-300">
                <strong>Student Login:</strong> Registry Number: {student.registryNo}
              </p>
            </div>
          )}
          {hasParentCredentials && (
            <div className="mt-3 p-3 bg-green-50 dark:bg-green-950 rounded-lg">
              <p className="text-sm text-green-700 dark:text-green-300">
                <strong>Parent Login:</strong> Email: {student.guardianEmail}
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Update Credentials Form */}
      <Card>
        <CardHeader>
          <CardTitle>Update Login Credentials</CardTitle>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-6">
              {/* Student Credentials */}
              <div className="space-y-4">
                <h4 className="font-medium flex items-center gap-2">
                  <User className="h-4 w-4" />
                  Student Login
                </h4>
                <FormField
                  control={form.control}
                  name="studentPassword"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>New Student Password</FormLabel>
                      <FormControl>
                        <Input 
                          type="password" 
                          placeholder="Enter new password (leave empty to keep current)"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              {/* Parent Credentials */}
              <div className="space-y-4 border-t pt-4">
                <h4 className="font-medium flex items-center gap-2">
                  <Users className="h-4 w-4" />
                  Parent/Guardian Login
                </h4>
                <FormField
                  control={form.control}
                  name="guardianEmail"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Guardian Email</FormLabel>
                      <FormControl>
                        <Input 
                          type="email" 
                          placeholder="guardian@email.com"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="guardianPassword"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>New Guardian Password</FormLabel>
                      <FormControl>
                        <Input 
                          type="password" 
                          placeholder="Enter new password (leave empty to keep current)"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="flex items-center justify-end space-x-4 pt-4">
                <Button type="button" variant="outline" onClick={onCancel}>
                  Cancel
                </Button>
                <Button type="submit" disabled={isLoading}>
                  {isLoading ? "Updating..." : "Update Credentials"}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}