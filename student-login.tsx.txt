import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { studentLoginSchema } from "@shared/schema";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { GraduationCap, User, Users } from "lucide-react";
import { apiRequest } from "@/lib/queryClient";
import { useLocation } from "wouter";

type LoginData = {
  registryNo: string;
  password: string;
};

export default function StudentLogin() {
  const [, setLocation] = useLocation();
  const [loginType, setLoginType] = useState<"student" | "parent">("student");
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<LoginData>({
    resolver: zodResolver(studentLoginSchema),
    defaultValues: {
      registryNo: "",
      password: "",
    },
  });

  const handleSubmit = async (data: LoginData) => {
    setIsLoading(true);
    setError("");

    try {
      const endpoint = loginType === "student" ? "/api/auth/student/login" : "/api/auth/parent/login";
      const loginData = loginType === "student" 
        ? { registryNo: data.registryNo, password: data.password }
        : { guardianEmail: data.registryNo, guardianPassword: data.password }; // Using registryNo field for email

      const response = await apiRequest("POST", endpoint, loginData);
      const result = await response.json();

      // Store user data in localStorage
      localStorage.setItem("studentPortalUser", JSON.stringify(result.user));
      
      // Redirect to student dashboard
      setLocation("/student-portal");
    } catch (error: any) {
      setError(error.message || "Login failed. Please check your credentials.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="w-16 h-16 bg-primary rounded-lg flex items-center justify-center mx-auto mb-4">
            <GraduationCap className="h-10 w-10 text-primary-foreground" />
          </div>
          <h1 className="text-3xl font-bold text-foreground">MADRASA-E-USMANIYA</h1>
          <p className="text-muted-foreground mt-2">Student & Parent Portal</p>
        </div>

        <Card className="card-shadow">
          <CardHeader className="space-y-1">
            <CardTitle className="text-2xl text-center">Welcome Back</CardTitle>
            
            {/* Login Type Toggle */}
            <div className="flex bg-muted rounded-lg p-1 mt-4">
              <button
                type="button"
                onClick={() => setLoginType("student")}
                className={`flex-1 flex items-center justify-center py-2 px-3 rounded-md text-sm font-medium transition-colors ${
                  loginType === "student"
                    ? "bg-background text-foreground shadow-sm"
                    : "text-muted-foreground hover:text-foreground"
                }`}
              >
                <User className="h-4 w-4 mr-2" />
                Student
              </button>
              <button
                type="button"
                onClick={() => setLoginType("parent")}
                className={`flex-1 flex items-center justify-center py-2 px-3 rounded-md text-sm font-medium transition-colors ${
                  loginType === "parent"
                    ? "bg-background text-foreground shadow-sm"
                    : "text-muted-foreground hover:text-foreground"
                }`}
              >
                <Users className="h-4 w-4 mr-2" />
                Parent
              </button>
            </div>
          </CardHeader>
          
          <CardContent>
            {error && (
              <Alert className="mb-6 border-destructive">
                <AlertDescription className="text-destructive">{error}</AlertDescription>
              </Alert>
            )}

            <Form {...form}>
              <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="registryNo"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>
                        {loginType === "student" ? "Registry Number" : "Guardian Email"}
                      </FormLabel>
                      <FormControl>
                        <Input
                          type={loginType === "student" ? "text" : "email"}
                          placeholder={
                            loginType === "student" 
                              ? "Enter your registry number" 
                              : "Enter guardian email"
                          }
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="password"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Password</FormLabel>
                      <FormControl>
                        <Input
                          type="password"
                          placeholder="Enter your password"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <Button type="submit" className="w-full" disabled={isLoading}>
                  {isLoading ? "Signing in..." : "Sign In"}
                </Button>
              </form>
            </Form>

            <div className="mt-6 text-center">
              <p className="text-sm text-muted-foreground">
                Need help accessing your account?{" "}
                <span className="text-primary hover:underline cursor-pointer">
                  Contact Administration
                </span>
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Demo Credentials */}
        <Card className="mt-4 bg-amber-50 border-amber-200">
          <CardContent className="p-4">
            <p className="text-sm font-medium text-amber-800 mb-2">Demo Credentials:</p>
            <div className="text-xs text-amber-700 space-y-1">
              <p><strong>Student:</strong> REG2024001 / student123</p>
              <p><strong>Parent:</strong> parent@email.com / parent123</p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}